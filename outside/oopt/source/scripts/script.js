// Generated by CoffeeScript 1.6.3
(function() {
  var build_pups, cities, ellipsoid, fly_to_Russia, get_oopt_rect, handler, load_borders, load_cities, load_np, load_zp, oopt, primitives, resize, scene, viewer;

  viewer = new Cesium.Viewer('cesiumContainer', {
    timeline: false,
    baseLayerPicker: false,
    infoBox: false,
    navigationHelpButton: false,
    geocoder: false,
    animation: false,
    scene3DOnly: true,
    fullscreenButton: false
  });

  scene = viewer.scene;

  primitives = scene.primitives;

  oopt = {};

  resize = function() {
    return $('#cesiumContainer').css('width', parseInt($(document).width()) - 200 + 'px');
  };

  resize();

  $(window).on('resize', resize);

  viewer.homeButton.viewModel.command.beforeExecute.addEventListener(function(commandInfo) {
    fly_to_Russia();
    return commandInfo.cancel = true;
  });

  fly_to_Russia = function() {
    return scene.camera.flyTo({
      destination: Cesium.Cartesian3.fromDegrees(85, 60, 10000000.0),
      duration: 3
    });
  };

  scene.camera.flyTo({
    destination: Cesium.Cartesian3.fromDegrees(85, 60, 10000000.0),
    duration: 0
  });

  load_np = function() {
    var dataSource;
    dataSource = new Cesium.GeoJsonDataSource();
    return dataSource.loadUrl("ndata/np-bcc.topojson").then(function() {
      var entities, entity, mat_property, _i, _len;
      viewer.dataSources.add(dataSource);
      entities = dataSource.entities.entities;
      mat_property = Cesium.ColorMaterialProperty.fromColor(new Cesium.Color(0, 0.3, 0.9, 0.6));
      for (_i = 0, _len = entities.length; _i < _len; _i++) {
        entity = entities[_i];
        if (entity.polygon) {
          entity.polygon.material = mat_property;
          entity.polygon.outline = new Cesium.ConstantProperty(false);
          entity.isNP = true;
          if (!oopt[entity.properties.NAME_EN]) {
            oopt[entity.properties.NAME_EN] = [];
          }
          oopt[entity.properties.NAME_EN].push(entity);
        }
      }
      return load_zp();
    });
  };

  load_np();

  load_zp = function() {
    var dataSource;
    dataSource = new Cesium.GeoJsonDataSource();
    return dataSource.loadUrl("ndata/zp-bcc.topojson").then(function() {
      var entities, entity, mat_property, _i, _len;
      viewer.dataSources.add(dataSource);
      entities = dataSource.entities.entities;
      mat_property = Cesium.ColorMaterialProperty.fromColor(new Cesium.Color(0, 0.9, 0.3, 0.6));
      for (_i = 0, _len = entities.length; _i < _len; _i++) {
        entity = entities[_i];
        if (entity.polygon) {
          entity.polygon.material = mat_property;
          entity.polygon.outline = new Cesium.ConstantProperty(false);
          entity.isNP = false;
          if (!oopt[entity.properties.NAME_EN]) {
            oopt[entity.properties.NAME_EN] = [];
          }
          oopt[entity.properties.NAME_EN].push(entity);
        }
      }
      return build_pups();
    });
  };

  build_pups = function() {
    var billboards, center, color, entity_key, rect;
    billboards = scene.primitives.add(new Cesium.BillboardCollection());
    for (entity_key in oopt) {
      $(".left_menu").append('<div>');
      $(".left_menu div:last-child").text(entity_key).on('click', function() {
        var rect, text;
        text = $(this).text();
        rect = get_oopt_rect(text);
        return scene.camera.flyToRectangle({
          destination: rect
        });
      });
      if (oopt[entity_key][0].isNP) {
        color = new Cesium.Color(0, 0.3, 0.9, 1);
        $(".left_menu div:last-child").addClass('np');
      } else {
        $(".left_menu div:last-child").addClass('zp');
        color = new Cesium.Color(0, 0.9, 0.3, 1);
      }
      rect = get_oopt_rect(entity_key);
      center = Cesium.Rectangle.center(rect);
      center = [center.latitude, center.longitude];
      if (entity_key === 'Ostrov Vrangelya') {
        center = [rect.north, rect.east];
      }
      oopt[entity_key].center = center;
      billboards.add({
        image: 'images/dot.png',
        position: Cesium.Cartesian3.fromRadians(center[1], center[0], 20000),
        id: entity_key,
        color: color,
        translucencyByDistance: new Cesium.NearFarScalar(1200000, 0, 1300000, 1)
      });
    }
    return load_borders();
  };

  load_borders = function() {
    var border_source;
    border_source = new Cesium.GeoJsonDataSource();
    return border_source.loadUrl('ndata/russia-bnd.topojson').then(function() {
      var b_entities, b_entitiy, positions, _i, _len, _results;
      b_entities = border_source.entities.entities;
      _results = [];
      for (_i = 0, _len = b_entities.length; _i < _len; _i++) {
        b_entitiy = b_entities[_i];
        positions = b_entitiy.polygon.positions.getValue();
        _results.push(primitives.add(new Cesium.Primitive({
          geometryInstances: new Cesium.GeometryInstance({
            geometry: new Cesium.PolylineGeometry({
              positions: positions,
              width: 1.0,
              vertexFormat: Cesium.PolylineColorAppearance.VERTEX_FORMAT
            }),
            attributes: {
              color: Cesium.ColorGeometryInstanceAttribute.fromColor(new Cesium.Color(0.8, 0.8, 0.8, 1))
            }
          }),
          appearance: new Cesium.PolylineColorAppearance()
        })));
      }
      return _results;
    }, load_cities());
  };

  load_cities = function() {
    var city, coord, labels, name, _i, _len;
    labels = new Cesium.LabelCollection();
    for (_i = 0, _len = cities.length; _i < _len; _i++) {
      city = cities[_i];
      coord = city['coordinates'];
      name = city['name'];
      labels.add({
        position: Cesium.Cartesian3.fromDegrees(coord[0], coord[1]),
        text: "â—‰ " + name,
        font: '12px Helvetica'
      });
    }
    return scene.primitives.add(labels);
  };

  handler = new Cesium.ScreenSpaceEventHandler(scene.canvas);

  ellipsoid = scene.globe.ellipsoid;

  handler.setInputAction((function(movement) {
    var polygon, polygon_name, rect;
    polygon = scene.drillPick(movement.position)[0];
    if ((typeof polygon.id) === "string") {
      polygon_name = polygon.id;
    } else {
      polygon_name = polygon.id.properties.NAME_EN;
    }
    rect = get_oopt_rect(polygon_name);
    return scene.camera.flyToRectangle({
      destination: rect
    });
  }), Cesium.ScreenSpaceEventType.LEFT_CLICK);

  get_oopt_rect = function(name) {
    var cartographics, polygon, _i, _len, _points, _ref;
    _points = [];
    _ref = oopt[name];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      polygon = _ref[_i];
      _points = _points.concat(polygon.polygon.positions.getValue());
    }
    cartographics = Cesium.Ellipsoid.WGS84.cartesianArrayToCartographicArray(_points);
    cartographics = cartographics.filter(function(val) {
      return val.height === 0;
    });
    return Cesium.Rectangle.fromCartographicArray(cartographics);
  };

  cities = [
    {
      "coordinates": [37.61325, 55.748],
      "name": "Moscow"
    }, {
      "coordinates": [73.35733, 54.91536],
      "name": "Omsk"
    }, {
      "coordinates": [104.18426, 52.19257],
      "name": "Irkutsk"
    }, {
      "coordinates": [134.85471, 48.5309],
      "name": "Khabarovsk"
    }
  ];

  $('.home_btn').on('click', function() {
    return scene.camera.flyTo({
      destination: Cesium.Cartesian3.fromDegrees(85, 60, 10000000.0),
      duration: 3
    });
  });

  $('.map_selector').on('click', function(e) {
    var bing, osm;
    if (e.offsetX > 177 / 2) {
      bing = new Cesium.BingMapsImageryProvider({
        url: 'http://dev.virtualearth.net',
        mapStyle: Cesium.BingMapsStyle.AERIAL
      });
      return viewer.scene.imageryLayers.addImageryProvider(bing);
    } else {
      osm = new Cesium.OpenStreetMapImageryProvider({
        url: 'http://a.tile.openstreetmap.org/'
      });
      return viewer.scene.imageryLayers.addImageryProvider(osm);
    }
  });

}).call(this);

/*
//@ sourceMappingURL=script.map
*/
